{"ast":null,"code":"var _jsxFileName = \"/home/student/Desktop/photography-website/portfolio-template/src/components/home/Content.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'; // Ensure you're using Bootstrap\nimport { Jumbotron } from './migration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Content = _ref => {\n  _s();\n  let {\n    heading\n  } = _ref;\n  const [youtubeLinks, setYoutubeLinks] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Fetch YouTube links from the backend\n    fetch('http://localhost:5000/api/urls').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      // Set youtubeLinks from the `urls` array in the JSON\n      if (data && Array.isArray(data.urls)) {\n        setYoutubeLinks(data.urls);\n        console.log();\n      } else {\n        console.error('Unexpected data format', data);\n      }\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  }, []); // Empty dependency array ensures the fetch runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"display-4 pb-5 text-center\",\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: youtubeLinks.length > 0 ? youtubeLinks.map((link, index) => /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 6,\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"embed-responsive embed-responsive-16by9\",\n            children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n              className: \"embed-responsive-item\",\n              src: `https://www.youtube.com/embed/${extractVideoId(link)}`,\n              allowFullScreen: true,\n              title: `YouTube video ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No YouTube videos available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to extract the video ID from a YouTube URL\n_s(Content, \"5W0JQJyf+XbDzlStrcTH3O05Dek=\");\n_c = Content;\nconst extractVideoId = url => {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get('v'); // Extract the video ID from the URL\n  } catch (error) {\n    console.error('Invalid YouTube URL', url);\n    return null; // Handle invalid URL\n  }\n};\n\nexport default Content;\nvar _c;\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Jumbotron","jsxDEV","_jsxDEV","Content","_ref","_s","heading","youtubeLinks","setYoutubeLinks","fetch","then","response","ok","Error","json","data","Array","isArray","urls","console","log","error","catch","fluid","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","link","index","xs","md","src","extractVideoId","allowFullScreen","title","_c","url","urlObj","URL","searchParams","get","$RefreshReg$"],"sources":["/home/student/Desktop/photography-website/portfolio-template/src/components/home/Content.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'; // Ensure you're using Bootstrap\nimport { Jumbotron } from './migration';\n\nconst Content = ({ heading }) => {\n  const [youtubeLinks, setYoutubeLinks] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Fetch YouTube links from the backend\n    fetch('http://localhost:5000/api/urls')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Set youtubeLinks from the `urls` array in the JSON\n        if (data && Array.isArray(data.urls)) {\n          setYoutubeLinks(data.urls);\n          console.log()\n        } else {\n          console.error('Unexpected data format', data);\n        }\n      })\n      .catch((error) => {\n        console.error('There was a problem with the fetch operation:', error);\n      });\n  }, []); // Empty dependency array ensures the fetch runs once when the component mounts\n\n  return (\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\n      <Container>\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\n        <Row className=\"justify-content-center\">\n          {/* Map through YouTube links and display two embedded videos per row */}\n          {youtubeLinks.length > 0 ? (\n            youtubeLinks.map((link, index) => (\n              <Col xs={12} md={6} key={index} className=\"mb-4\">\n                <div className=\"embed-responsive embed-responsive-16by9\">\n                  <iframe\n                    className=\"embed-responsive-item\"\n                    src={`https://www.youtube.com/embed/${extractVideoId(link)}`}\n                    allowFullScreen\n                    title={`YouTube video ${index + 1}`}\n                  ></iframe>\n                </div>\n              </Col>\n            ))\n          ) : (\n            <p>No YouTube videos available</p>\n          )}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\n// Function to extract the video ID from a YouTube URL\nconst extractVideoId = (url) => {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get('v'); // Extract the video ID from the URL\n  } catch (error) {\n    console.error('Invalid YouTube URL', url);\n    return null; // Handle invalid URL\n  }\n};\n\nexport default Content;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}