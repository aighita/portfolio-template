{"ast":null,"code":"var _jsxFileName = \"/home/student/Desktop/photography-website/portfolio-template/src/components/home/Brands.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\n// Components to use/build on top of\nimport { Jumbotron } from \"./migration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Brands = _ref => {\n  _s();\n  let {\n    heading\n  } = _ref;\n  const [logos, setLogos] = useState([]);\n  useEffect(() => {\n    // Fetch logos from the backend\n    fetch('http://localhost:5000/api/brands').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setLogos(data); // Set logos state\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  }, []); // Empty dependency array ensures the fetch runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"bg-light m-0\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"display-4 pb-5 text-center\",\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: logos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"No logos to display. Folder is empty. Try adding at least one \\\".png\\\" file.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this) :\n        // Map through the logos and display them in 3-per-row format\n        logos.map((logo, index) => /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          sm: 4,\n          className: \"d-flex justify-content-center mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: `Brand logo ${index + 1}`,\n            className: \"img-fluid logo-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Brands, \"vl3j/QvczQ0PZOGsRwWJ7X9qtO4=\");\n_c = Brands;\nexport default Brands;\nvar _c;\n$RefreshReg$(_c, \"Brands\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Jumbotron","jsxDEV","_jsxDEV","Brands","_ref","_s","heading","logos","setLogos","fetch","then","response","ok","Error","json","data","catch","error","console","fluid","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","style","textAlign","map","logo","index","xs","sm","src","alt","_c","$RefreshReg$"],"sources":["/home/student/Desktop/photography-website/portfolio-template/src/components/home/Brands.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\n// Components to use/build on top of\nimport { Jumbotron } from \"./migration\";\n\nconst Brands = ({ heading }) => {\n  const [logos, setLogos] = useState([]);\n\n  useEffect(() => {\n    // Fetch logos from the backend\n    fetch('http://localhost:5000/api/brands')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setLogos(data);  // Set logos state\n      })\n      .catch(error => {\n        console.error('There was a problem with the fetch operation:', error);\n      });\n  }, []);  // Empty dependency array ensures the fetch runs once when the component mounts\n\n  return (\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\n      <Container>\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\n        <Row className=\"justify-content-center\">\n          {/* If logos array is empty, display a message */}\n          {logos.length === 0 ? (\n            <p style={{ textAlign: \"center\" }}>No logos to display. Folder is empty. Try adding at least one \".png\" file.</p>\n          ) : (\n            // Map through the logos and display them in 3-per-row format\n            logos.map((logo, index) => (\n              <Col key={index} xs={12} sm={4} className=\"d-flex justify-content-center mb-4\">\n                <img src={logo} alt={`Brand logo ${index + 1}`} className=\"img-fluid logo-image\" />\n              </Col>\n            ))\n          )}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Brands;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;;AAErD;AACA,SAASC,SAAS,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,MAAM,GAAGC,IAAA,IAAiB;EAAAC,EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EACzB,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAa,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAE;IACnB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACvE,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBACEf,OAAA,CAACF,SAAS;IAACmB,KAAK;IAACC,EAAE,EAAC,UAAU;IAACC,SAAS,EAAC,cAAc;IAAAC,QAAA,eACrDpB,OAAA,CAACL,SAAS;MAAAyB,QAAA,gBACRpB,OAAA;QAAImB,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAEhB;MAAO;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzDxB,OAAA,CAACJ,GAAG;QAACuB,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAEpCf,KAAK,CAACoB,MAAM,KAAK,CAAC,gBACjBzB,OAAA;UAAG0B,KAAK,EAAE;YAAEC,SAAS,EAAE;UAAS,CAAE;UAAAP,QAAA,EAAC;QAA0E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;QAEjH;QACAnB,KAAK,CAACuB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpB9B,OAAA,CAACH,GAAG;UAAakC,EAAE,EAAE,EAAG;UAACC,EAAE,EAAE,CAAE;UAACb,SAAS,EAAC,oCAAoC;UAAAC,QAAA,eAC5EpB,OAAA;YAAKiC,GAAG,EAAEJ,IAAK;YAACK,GAAG,EAAG,cAAaJ,KAAK,GAAG,CAAE,EAAE;YAACX,SAAS,EAAC;UAAsB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,GAD3EM,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEhB,CAAC;AAACrB,EAAA,CAxCIF,MAAM;AAAAkC,EAAA,GAANlC,MAAM;AA0CZ,eAAeA,MAAM;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}